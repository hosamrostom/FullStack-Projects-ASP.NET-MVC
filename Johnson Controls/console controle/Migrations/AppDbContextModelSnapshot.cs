// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using console_controle.Data;

#nullable disable

namespace console_controle.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fa2fc980-0d7a-44be-861d-ccc12cbcc4aa",
                            ConcurrencyStamp = "8400a40e-ec91-4616-b645-30be3b458d9f",
                            Name = "HarringManger",
                            NormalizedName = "HarringManger"
                        },
                        new
                        {
                            Id = "5430fe36-540e-4b07-957e-0e93ac36302c",
                            ConcurrencyStamp = "b56c4b79-6119-48c5-a934-d1ec8a28ca67",
                            Name = "Recruiter",
                            NormalizedName = "Recruiter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("console_controle.Models.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentValueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Individual Contributor - Support"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Individual Contributor - Professional"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Middle Management"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Top Management"
                        });
                });

            modelBuilder.Entity("console_controle.Models.AssessmentValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssessmentValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentTypeId = 1,
                            QuestionId = 1,
                            Value = "Technical Skills"
                        },
                        new
                        {
                            Id = 2,
                            AssessmentTypeId = 1,
                            QuestionId = 2,
                            Value = "Customer Orientation"
                        },
                        new
                        {
                            Id = 3,
                            AssessmentTypeId = 1,
                            QuestionId = 3,
                            Value = "Quality of Work"
                        },
                        new
                        {
                            Id = 4,
                            AssessmentTypeId = 1,
                            QuestionId = 4,
                            Value = "Execution Discipline"
                        },
                        new
                        {
                            Id = 5,
                            AssessmentTypeId = 1,
                            QuestionId = 5,
                            Value = "Communication Skills"
                        },
                        new
                        {
                            Id = 6,
                            AssessmentTypeId = 1,
                            QuestionId = 6,
                            Value = "Adaptability"
                        },
                        new
                        {
                            Id = 7,
                            AssessmentTypeId = 1,
                            QuestionId = 7,
                            Value = "Attention to Detail"
                        },
                        new
                        {
                            Id = 8,
                            AssessmentTypeId = 1,
                            QuestionId = 8,
                            Value = "Physical Stamina"
                        },
                        new
                        {
                            Id = 9,
                            AssessmentTypeId = 2,
                            QuestionId = 9,
                            Value = "Execution Discipline"
                        },
                        new
                        {
                            Id = 10,
                            AssessmentTypeId = 2,
                            QuestionId = 10,
                            Value = "Managing Work"
                        },
                        new
                        {
                            Id = 11,
                            AssessmentTypeId = 2,
                            QuestionId = 11,
                            Value = "Decision Making"
                        },
                        new
                        {
                            Id = 12,
                            AssessmentTypeId = 2,
                            QuestionId = 12,
                            Value = "Agility"
                        },
                        new
                        {
                            Id = 13,
                            AssessmentTypeId = 2,
                            QuestionId = 13,
                            Value = "Innovation"
                        },
                        new
                        {
                            Id = 14,
                            AssessmentTypeId = 2,
                            QuestionId = 14,
                            Value = "Influencing with Impact"
                        },
                        new
                        {
                            Id = 15,
                            AssessmentTypeId = 2,
                            QuestionId = 15,
                            Value = "Collaboration"
                        },
                        new
                        {
                            Id = 16,
                            AssessmentTypeId = 2,
                            QuestionId = 16,
                            Value = "Customer Orientation"
                        },
                        new
                        {
                            Id = 17,
                            AssessmentTypeId = 2,
                            QuestionId = 17,
                            Value = "English Proficiency"
                        },
                        new
                        {
                            Id = 18,
                            AssessmentTypeId = 2,
                            QuestionId = 18,
                            Value = "Strategic Thinking"
                        },
                        new
                        {
                            Id = 19,
                            AssessmentTypeId = 3,
                            QuestionId = 19,
                            Value = "Building an Effective Team"
                        },
                        new
                        {
                            Id = 20,
                            AssessmentTypeId = 3,
                            QuestionId = 20,
                            Value = "Coaching Others"
                        },
                        new
                        {
                            Id = 21,
                            AssessmentTypeId = 3,
                            QuestionId = 21,
                            Value = "Execution Discipline"
                        },
                        new
                        {
                            Id = 22,
                            AssessmentTypeId = 3,
                            QuestionId = 22,
                            Value = "Planning and Organizing"
                        },
                        new
                        {
                            Id = 23,
                            AssessmentTypeId = 3,
                            QuestionId = 23,
                            Value = "Business Acumen"
                        },
                        new
                        {
                            Id = 24,
                            AssessmentTypeId = 3,
                            QuestionId = 24,
                            Value = "English Proficiency"
                        },
                        new
                        {
                            Id = 25,
                            AssessmentTypeId = 4,
                            QuestionId = 25,
                            Value = "Strategic Vision"
                        },
                        new
                        {
                            Id = 26,
                            AssessmentTypeId = 4,
                            QuestionId = 26,
                            Value = "Business Acumen"
                        },
                        new
                        {
                            Id = 27,
                            AssessmentTypeId = 4,
                            QuestionId = 27,
                            Value = "Leadership"
                        },
                        new
                        {
                            Id = 28,
                            AssessmentTypeId = 4,
                            QuestionId = 28,
                            Value = "Change Management"
                        },
                        new
                        {
                            Id = 29,
                            AssessmentTypeId = 4,
                            QuestionId = 29,
                            Value = "Decision Making"
                        },
                        new
                        {
                            Id = 30,
                            AssessmentTypeId = 4,
                            QuestionId = 30,
                            Value = "Innovation"
                        },
                        new
                        {
                            Id = 31,
                            AssessmentTypeId = 4,
                            QuestionId = 31,
                            Value = "Global Perspective"
                        },
                        new
                        {
                            Id = 32,
                            AssessmentTypeId = 4,
                            QuestionId = 32,
                            Value = "Stakeholder Management"
                        });
                });

            modelBuilder.Entity("console_controle.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HiringManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("HiringManagerId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentTypeId = 1,
                            Department = "Engineering",
                            HiringManagerId = 1,
                            InterviewDate = new DateTime(2025, 4, 27, 7, 1, 18, 914, DateTimeKind.Local).AddTicks(2165),
                            Name = "John Doe",
                            Position = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            AssessmentTypeId = 2,
                            Department = "Management",
                            HiringManagerId = 2,
                            InterviewDate = new DateTime(2025, 4, 28, 7, 1, 18, 916, DateTimeKind.Local).AddTicks(9057),
                            Name = "Jane Smith",
                            Position = "Project Manager"
                        },
                        new
                        {
                            Id = 3,
                            AssessmentTypeId = 3,
                            Department = "Engineering",
                            HiringManagerId = 3,
                            InterviewDate = new DateTime(2025, 4, 27, 7, 1, 18, 916, DateTimeKind.Local).AddTicks(9392),
                            Name = "John Doe",
                            Position = "Software Engineer"
                        },
                        new
                        {
                            Id = 4,
                            AssessmentTypeId = 4,
                            Department = "Management",
                            HiringManagerId = 4,
                            InterviewDate = new DateTime(2025, 4, 28, 7, 1, 18, 916, DateTimeKind.Local).AddTicks(9400),
                            Name = "Jane Smith",
                            Position = "Project Manager"
                        });
                });

            modelBuilder.Entity("console_controle.Models.CandidateAssessmentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("Opportunities")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Strengths")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Threats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Weaknesses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateAssessmentResults");
                });

            modelBuilder.Entity("console_controle.Models.CandidateEvaluationViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentResultId")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateAssessmentResultId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HiringManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentResultId");

                    b.HasIndex("CandidateAssessmentResultId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ResultId");

                    b.ToTable("CandidateEvaluationViewModels");
                });

            modelBuilder.Entity("console_controle.Models.HiringManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("HiringManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.brown@example.com",
                            Name = "Alice Brown"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob.green@example.com",
                            Name = "Bob Green"
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice.bgfdgrown@example.com",
                            Name = " Brown"
                        },
                        new
                        {
                            Id = 4,
                            Email = "bob.grpohn@example.com",
                            Name = "Bobge Gpoeen"
                        });
                });

            modelBuilder.Entity("console_controle.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Level1_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextQ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level1_2 = "Lacks required technical skills; basic proficiency.",
                            Level3 = "Good technical skills with some proficiency.",
                            Level4 = "Strong technical skills and expertise.",
                            SubQuestion = "Can you provide an example where your technical skills directly contributed to the success of a project?",
                            TextQ = "How do you ensure that your technical skills are continuously improving?"
                        },
                        new
                        {
                            Id = 2,
                            Level1_2 = "No focus on customer satisfaction; basic understanding.",
                            Level3 = "Good understanding of customer needs and some focus on satisfaction.",
                            Level4 = "Strong focus on customer satisfaction.",
                            SubQuestion = "Share an example where you went above and beyond to address a customer concern.",
                            TextQ = "How do you ensure that customer needs are at the forefront of your work?"
                        },
                        new
                        {
                            Id = 3,
                            Level1_2 = "Poor quality of work; lack of attention to detail.",
                            Level3 = "Good quality of work with attention to detail.",
                            Level4 = "Strong quality of work and meticulous attention to detail.",
                            SubQuestion = "Can you describe a time when you identified an opportunity to improve the quality of a project or task?",
                            TextQ = "How do you ensure that your work consistently meets quality standards?"
                        },
                        new
                        {
                            Id = 4,
                            Level1_2 = "Poor execution; missed deadlines.",
                            Level3 = "Good execution with most deadlines met.",
                            Level4 = "Strong execution and consistent on-time delivery.",
                            SubQuestion = "Describe a time when you had to handle competing priorities. How did you manage it?",
                            TextQ = "How do you ensure that you consistently meet deadlines for your tasks?"
                        },
                        new
                        {
                            Id = 5,
                            Level1_2 = "Poor communication skills; limited effectiveness.",
                            Level3 = "Good communication skills with some effectiveness.",
                            Level4 = "Strong communication skills that ensure clarity and understanding.",
                            SubQuestion = "Can you provide an example of a time when effective communication helped resolve a misunderstanding?",
                            TextQ = "How do you ensure clarity and professionalism in your communication?"
                        },
                        new
                        {
                            Id = 6,
                            Level1_2 = "Resistant to change; basic adaptability.",
                            Level3 = "Good adaptability to changes.",
                            Level4 = "Strong adaptability and ability to thrive in changing environments.",
                            SubQuestion = "Can you describe a time when you successfully adapted to a new work culture or process?",
                            TextQ = "How do you manage stress or uncertainty in dynamic environments?"
                        },
                        new
                        {
                            Id = 7,
                            Level1_2 = "Poor attention to detail; many errors.",
                            Level3 = "Good attention to detail with few errors.",
                            Level4 = "Strong attention to detail and accuracy.",
                            SubQuestion = "Can you share an example where your attention to detail prevented a mistake?",
                            TextQ = "How do you ensure that you thoroughly review all aspects of your work before completion?"
                        },
                        new
                        {
                            Id = 8,
                            Level1_2 = "Lacks physical stamina; basic limitations.",
                            Level3 = "Good physical stamina to meet most demands.",
                            Level4 = "Strong physical stamina and ability to handle demanding tasks.",
                            SubQuestion = "Can you share a time when your physical stamina helped you meet a challenging work deadline?",
                            TextQ = "How do you maintain your energy levels during long working hours or physically demanding tasks?"
                        },
                        new
                        {
                            Id = 9,
                            Level1_2 = "Poor execution; missed deadlines.",
                            Level3 = "Good execution with most deadlines met.",
                            Level4 = "Strong execution and consistent on-time delivery.",
                            SubQuestion = "Describe a time when you had to handle competing priorities. How did you manage it?",
                            TextQ = "How do you ensure that you consistently meet deadlines for your tasks?"
                        },
                        new
                        {
                            Id = 10,
                            Level1_2 = "Struggles to manage workload; misses deadlines.",
                            Level3 = "Manages workload with some assistance; meets deadlines.",
                            Level4 = "Manages workload effectively, consistently meeting or exceeding expectations.",
                            SubQuestion = "What tools or techniques do you use to track progress and avoid delays?",
                            TextQ = "How do you organize your daily workload to ensure efficiency?"
                        },
                        new
                        {
                            Id = 11,
                            Level1_2 = "Struggles to make decisions; limited risk assessment.",
                            Level3 = "Makes sound decisions with moderate risk assessment.",
                            Level4 = "Makes informed, well-analyzed decisions with excellent risk/benefit evaluation.",
                            SubQuestion = "How do you evaluate the potential risks and benefits of your decisions?",
                            TextQ = "Share an example where you had to make a decision with limited information. What steps did you take?"
                        },
                        new
                        {
                            Id = 12,
                            Level1_2 = "Struggles with change; slow to adapt.",
                            Level3 = "Adapts to changes with some effort.",
                            Level4 = "Demonstrates exceptional agility in adapting to new situations.",
                            SubQuestion = "How do you remain productive when faced with changing priorities?",
                            TextQ = "Describe a situation where you had to quickly adapt to a major change at work. What was the outcome?"
                        },
                        new
                        {
                            Id = 13,
                            Level1_2 = "No culture of innovation; limited efforts.",
                            Level3 = "Some efforts to foster innovation.",
                            Level4 = "Strong culture of innovation that drives continuous improvement.",
                            SubQuestion = "How do you approach brainstorming or problem-solving?",
                            TextQ = "Have you suggested a new process or idea that improved team performance? What was it?"
                        },
                        new
                        {
                            Id = 14,
                            Level1_2 = "Limited influence over others.",
                            Level3 = "Good influence with moderate success.",
                            Level4 = "Highly effective at influencing others to adopt desired actions.",
                            SubQuestion = "How do you adjust your communication style to influence others effectively?",
                            TextQ = "Can you provide an example of how you persuaded a colleague or stakeholder to adopt your approach?"
                        },
                        new
                        {
                            Id = 15,
                            Level1_2 = "Struggles to collaborate effectively.",
                            Level3 = "Works well with team members and contributes to goals.",
                            Level4 = "Exceptionally collaborative and a strong team player.",
                            SubQuestion = "Describe a time when you resolved a conflict within your team.",
                            TextQ = "How do you contribute to fostering a positive and collaborative team environment?"
                        },
                        new
                        {
                            Id = 16,
                            Level1_2 = "Limited ability to meet customer needs.",
                            Level3 = "Consistently meets customer needs with some effort.",
                            Level4 = "Exceeds customer expectations consistently.",
                            SubQuestion = "Share an example where you went above and beyond to address a customer concern.",
                            TextQ = "How do you ensure that customer needs are at the forefront of your work?"
                        },
                        new
                        {
                            Id = 17,
                            Level1_2 = "Limited proficiency in English communication.",
                            Level3 = "Good proficiency with occasional mistakes.",
                            Level4 = "Highly proficient and clear in both written and verbal communication.",
                            SubQuestion = "Describe a time when your verbal communication was critical to achieving a work objective.",
                            TextQ = "How do you ensure clarity and professionalism in your written communication?"
                        },
                        new
                        {
                            Id = 18,
                            Level1_2 = "Limited understanding of strategic thinking.",
                            Level3 = "Understands strategic goals and aligns decisions accordingly.",
                            Level4 = "Strong strategic thinker with the ability to shape long-term plans.",
                            SubQuestion = "Share an example where strategic thinking helped you solve a complex problem.",
                            TextQ = "How do you align your daily tasks with broader organizational goals?"
                        },
                        new
                        {
                            Id = 19,
                            Level1_2 = "Limited ability to build effective teams.",
                            Level3 = "Builds effective teams with some challenges.",
                            Level4 = "Creates strong, cohesive teams that work effectively together.",
                            SubQuestion = "Describe an initiative where you developed your team's skills or capabilities.",
                            TextQ = "How have you fostered a strong sense of trust and collaboration within your team?"
                        },
                        new
                        {
                            Id = 20,
                            Level1_2 = "Rarely coaches or provides feedback.",
                            Level3 = "Provides coaching and feedback in some situations.",
                            Level4 = "Consistently coaches and provides actionable feedback to drive growth.",
                            SubQuestion = "How do you provide constructive feedback to your team?",
                            TextQ = "Share an example where your coaching helped improve an employee's performance."
                        },
                        new
                        {
                            Id = 21,
                            Level1_2 = "Inconsistent in delivering projects on time and within scope.",
                            Level3 = "Delivers projects on time with minor scope changes.",
                            Level4 = "Consistently delivers projects on time and within scope, resolving issues effectively.",
                            SubQuestion = "Describe a time when you identified and resolved an issue that threatened project delivery.",
                            TextQ = "How do you ensure that projects are delivered on time and within scope?"
                        },
                        new
                        {
                            Id = 22,
                            Level1_2 = "Struggles with prioritizing and organizing tasks.",
                            Level3 = "Plans and organizes tasks with some success.",
                            Level4 = "Proactively plans and organizes tasks to achieve team objectives efficiently.",
                            SubQuestion = "Describe a time when proactive planning led to a successful outcome.",
                            TextQ = "How do you prioritize tasks and allocate resources to meet team objectives?"
                        },
                        new
                        {
                            Id = 23,
                            Level1_2 = "Limited understanding of business strategy and market trends.",
                            Level3 = "Applies market trends to team objectives with moderate success.",
                            Level4 = "Demonstrates strong business acumen, incorporating market trends and strategic insights into team decisions.",
                            SubQuestion = "Describe a time when you identified a business opportunity or risk and acted on it.",
                            TextQ = "How do you incorporate market trends or organizational priorities into your team’s objectives?"
                        },
                        new
                        {
                            Id = 24,
                            Level1_2 = "Limited proficiency in English communication.",
                            Level3 = "Good proficiency with occasional mistakes.",
                            Level4 = "Highly proficient and clear in both written and verbal communication.",
                            SubQuestion = "Describe a situation where your communication skills influenced a high-level stakeholder.",
                            TextQ = "How do you ensure your presentations or reports are clear, concise, and impactful?"
                        },
                        new
                        {
                            Id = 25,
                            Level1_2 = "Limited understanding of long-term strategic goals.",
                            Level3 = "Aligns daily tasks with broader organizational goals with some effort.",
                            Level4 = "Strong strategic vision that guides long-term success.",
                            SubQuestion = "Can you share an example where your strategic vision helped your team achieve a significant milestone?",
                            TextQ = "How do you align your long-term goals with the broader strategic direction of the organization?"
                        },
                        new
                        {
                            Id = 26,
                            Level1_2 = "Limited understanding of business strategy and market trends.",
                            Level3 = "Applies market trends to team objectives with moderate success.",
                            Level4 = "Demonstrates strong business acumen, incorporating market trends and strategic insights into team decisions.",
                            SubQuestion = "Describe a time when you identified a business opportunity or risk and acted on it.",
                            TextQ = "How do you incorporate market trends or organizational priorities into your team’s objectives?"
                        },
                        new
                        {
                            Id = 27,
                            Level1_2 = "Struggles to inspire and motivate team members.",
                            Level3 = "Motivates the team and contributes to positive outcomes.",
                            Level4 = "Inspires and motivates the team to achieve exceptional performance.",
                            SubQuestion = "Can you describe a situation where your leadership skills helped your team overcome a challenge?",
                            TextQ = "How do you inspire and motivate your team to achieve high performance?"
                        },
                        new
                        {
                            Id = 28,
                            Level1_2 = "Struggles with managing change; resistance to new processes.",
                            Level3 = "Manages change effectively with some challenges.",
                            Level4 = "Leads successful change initiatives that drive improvement.",
                            SubQuestion = "Describe a time when you successfully led a change initiative. What challenges did you face?",
                            TextQ = "How do you manage change within your team or organization?"
                        },
                        new
                        {
                            Id = 29,
                            Level1_2 = "Struggles to make decisions with limited information.",
                            Level3 = "Makes decisions with some confidence based on available information.",
                            Level4 = "Makes well-informed decisions with strong risk/benefit analysis.",
                            SubQuestion = "How do you evaluate the potential risks and benefits of your decisions?",
                            TextQ = "Share an example where you had to make a decision with limited information. What steps did you take?"
                        },
                        new
                        {
                            Id = 30,
                            Level1_2 = "Limited involvement in innovative efforts.",
                            Level3 = "Contributes to innovation with moderate success.",
                            Level4 = "Consistently generates innovative ideas that improve performance.",
                            SubQuestion = "How do you approach brainstorming or problem-solving?",
                            TextQ = "Have you suggested a new process or idea that improved team performance? What was it?"
                        },
                        new
                        {
                            Id = 31,
                            Level1_2 = "Limited understanding of global perspectives.",
                            Level3 = "Considers global perspectives in decision-making.",
                            Level4 = "Strong global perspective that drives international success.",
                            SubQuestion = "Can you share a time when your global perspective helped your team solve a complex problem?",
                            TextQ = "How do you ensure that your work takes into account global perspectives or international considerations?"
                        },
                        new
                        {
                            Id = 32,
                            Level1_2 = "Limited ability to manage stakeholders.",
                            Level3 = "Manages stakeholder relationships with moderate success.",
                            Level4 = "Effectively engages and manages key stakeholders to drive success.",
                            SubQuestion = "Describe a time when you effectively managed a difficult stakeholder situation.",
                            TextQ = "How do you engage and manage relationships with key stakeholders?"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("console_controle.Models.AssessmentValue", b =>
                {
                    b.HasOne("console_controle.Models.AssessmentType", "AssessmentType")
                        .WithMany("AssessmentValues")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("console_controle.Models.Question", "Question")
                        .WithMany("AssessmentValues")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssessmentType");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("console_controle.Models.Candidate", b =>
                {
                    b.HasOne("console_controle.Models.AssessmentType", "AssessmentType")
                        .WithMany("Candidates")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("console_controle.Models.HiringManager", "HiringManager")
                        .WithMany("Candidates")
                        .HasForeignKey("HiringManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssessmentType");

                    b.Navigation("HiringManager");
                });

            modelBuilder.Entity("console_controle.Models.CandidateAssessmentResult", b =>
                {
                    b.HasOne("console_controle.Models.Candidate", "Candidate")
                        .WithMany("CandidateAssessmentResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("console_controle.Models.CandidateEvaluationViewModel", b =>
                {
                    b.HasOne("console_controle.Models.CandidateAssessmentResult", "AssessmentResult")
                        .WithMany()
                        .HasForeignKey("AssessmentResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("console_controle.Models.CandidateAssessmentResult", "CandidateAssessmentResult")
                        .WithMany()
                        .HasForeignKey("CandidateAssessmentResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("console_controle.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("console_controle.Models.CandidateAssessmentResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentResult");

                    b.Navigation("Candidate");

                    b.Navigation("CandidateAssessmentResult");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("console_controle.Models.AssessmentType", b =>
                {
                    b.Navigation("AssessmentValues");

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("console_controle.Models.Candidate", b =>
                {
                    b.Navigation("CandidateAssessmentResults");
                });

            modelBuilder.Entity("console_controle.Models.HiringManager", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("console_controle.Models.Question", b =>
                {
                    b.Navigation("AssessmentValues");
                });
#pragma warning restore 612, 618
        }
    }
}
