@model List<console_controle.Models.CandidateAssessmentResult>
@{
    Layout = null;

    int totalStrengths = Model.Sum(r => r.Strengths?.Count ?? 0);
    int totalThreats = Model.Sum(r => r.Threats?.Count ?? 0);
    int totalOpportunities = Model.Sum(r => r.Opportunities?.Count ?? 0);
    int totalWeaknesses = Model.Sum(r => r.Weaknesses?.Count ?? 0);

    double rawScore = (totalStrengths * 1) + (totalThreats * -1.5) + (totalOpportunities * 0.5) + (totalWeaknesses * -1);
    double normalizedScore = Math.Max(0, Math.Min(100, ((rawScore + 10) * 5)));
    bool isRecommended = normalizedScore > 50;

    var strengths = Model.SelectMany(r => r.Strengths ?? new List<string>()).ToList();
    var threats = Model.SelectMany(r => r.Threats ?? new List<string>()).ToList();
    var opportunities = Model.SelectMany(r => r.Opportunities ?? new List<string>()).ToList();
    var weaknesses = Model.SelectMany(r => r.Weaknesses ?? new List<string>()).ToList();

    var allLabels = strengths.Concat(threats).Concat(opportunities).Concat(weaknesses).Distinct().ToList();

    int CountOccurrences(List<string> list, string item) => list.Count(x => x == item);
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container mt-5">
    <h2 class="text-center mb-4">Candidate Assessment Results</h2>

    <form method="get" class="mb-4">
        <label for="candidateId" class="form-label fw-bold">Select a Candidate:</label>
        <select id="candidateId" name="candidateId" class="form-select" onchange="this.form.submit()">
            <option value="">-- Select a Candidate --</option>
            @foreach (var candidate in ViewBag.Candidates)
            {
                <option value="@candidate.Value" selected="@(ViewContext.HttpContext.Request.Query["candidateId"] == candidate.Value ? "selected" : null)">
                    @candidate.Text
                </option>
            }
        </select>
    </form>

    @if (Model != null && Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var category in new[] { "Strengths", "Threats", "Opportunities", "Weaknesses" })
            {
                var list = category == "Strengths" ? Model.SelectMany(r => r.Strengths ?? new List<string>()).ToList() :
                category == "Threats" ? Model.SelectMany(r => r.Threats ?? new List<string>()).ToList() :
                category == "Opportunities" ? Model.SelectMany(r => r.Opportunities ?? new List<string>()).ToList() :
                Model.SelectMany(r => r.Weaknesses ?? new List<string>()).ToList();

                var colorClass = category == "Strengths" ? "success" : category == "Threats" ? "danger" : category == "Opportunities" ? "primary" : "warning text-dark";

                <div class="col">
                    <div class="card border-@colorClass">
                        <div class="card-header bg-@colorClass text-white fw-bold">@category</div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                @if (list.Any())
                                {
                                    foreach (var item in list.Distinct())
                                    {
                                        <li class="list-group-item">@item</li>
                                    }
                                }
                                else
                                {
                                    <li class="list-group-item text-muted">No data available</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>

       

        <!-- Pie Chart for Competency Distribution -->
        <div class="card mt-4 shadow-sm">
            <div class="card-header bg-light fw-semibold text-center">Competency Distribution</div>
            <div class="card-body">
                <canvas id="competencyPieChart" style="max-height: 400px;"></canvas>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var ctx = document.getElementById('competencyPieChart').getContext('2d');
                var data = {
                    labels: ["Strengths", "Threats", "Opportunities", "Weaknesses"],
                    datasets: [{
                        data: [@totalStrengths, @totalThreats, @totalOpportunities, @totalWeaknesses],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.5)',
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(255, 206, 86, 0.5)'
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)'
                        ],
                        borderWidth: 1
                    }]
                };

                new Chart(ctx, {
                    type: 'pie',
                    data: data,
                    options: {
                        plugins: {
                            legend: {
                                position: 'right'
                            },
                            title: {
                                display: true,
                                text: 'Competency Distribution'
                            }
                        }
                    }
                });
            });
        </script>







        <!-- Bar Chart -->

        <div class="container my-5">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-center fw-bold">SWOT Bar Chart</h5>
                    <canvas id="swotBarChart"></canvas>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const allLabels = @Html.Raw(Json.Serialize(allLabels));
                const strengths = @Html.Raw(Json.Serialize(strengths));
                const threats = @Html.Raw(Json.Serialize(threats));
                const opportunities = @Html.Raw(Json.Serialize(opportunities));
                const weaknesses = @Html.Raw(Json.Serialize(weaknesses));

                const categoryValues = {
                    'Strengths': 4,
                    'Threats': 1,
                    'Opportunities': 3,
                    'Weaknesses': 2
                };

                const dataValues = allLabels.map(label => ({
                    label: label,
                    strengths: strengths.includes(label) ? categoryValues['Strengths'] : 0,
                    threats: threats.includes(label) ? categoryValues['Threats'] : 0,
                    opportunities: opportunities.includes(label) ? categoryValues['Opportunities'] : 0,
                    weaknesses: weaknesses.includes(label) ? categoryValues['Weaknesses'] : 0
                }));

                const barCtx = document.getElementById('swotBarChart').getContext('2d');
                new Chart(barCtx, {
                    type: 'bar',
                    data: {
                        labels: dataValues.map(d => d.label),
                        datasets: [
                            {
                                label: 'Strengths',
                                data: dataValues.map(d => d.strengths),
                                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Threats',
                                data: dataValues.map(d => d.threats),
                                backgroundColor: 'rgba(255, 99, 132, 0.6)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Opportunities',
                                data: dataValues.map(d => d.opportunities),
                                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Weaknesses',
                                data: dataValues.map(d => d.weaknesses),
                                backgroundColor: 'rgba(255, 206, 86, 0.6)',
                                borderColor: 'rgba(255, 206, 86, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: { beginAtZero: true, max: 4, ticks: { stepSize: 1 } }
                        }
                    }
                });
            });
        </script>


        <!-- Radar Chart -->
        <div class="container my-5">
            <div class="radar-container">
                <h3 class="text-center fw-bold mb-4">SWOT Radar Chart</h3>
                <div class="chart-wrapper">
                    <canvas id="swotRadarChart"></canvas>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const radarCtx = document.getElementById('swotRadarChart').getContext('2d');
                new Chart(radarCtx, {
                    type: 'radar',
                    data: {
                        labels: ['Strengths', 'Threats', 'Opportunities', 'Weaknesses'],
                        datasets: [{
                            label: 'Normalized Score',
                            data: [@totalStrengths / 4, @totalThreats / 4, @totalOpportunities / 4, @totalWeaknesses / 4],
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgb(54, 162, 235)',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        scales: { r: { suggestedMin: 0, suggestedMax: 1 } }
                    }
                });
            });
        </script>

        <div class="card mt-4 shadow-sm">
            <div class="card-header bg-light fw-semibold text-center">Final Assessment</div>
            <div class="card-body text-center">
                <p class="display-6 text-primary fw-bold">@normalizedScore.ToString("0.0")%</p>
                <p class="fs-5 fw-bold @(isRecommended ? "text-success" : "text-danger")">
                    @(isRecommended ? "Recommended" : "Not Recommended")
                </p>
            </div>
        </div>



    }
    else
    {
        <div class="alert alert-warning text-center mt-4">No assessments available for this candidate.</div>
    }
</div>

    